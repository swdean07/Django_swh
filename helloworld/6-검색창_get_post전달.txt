장고,
기본 디자인 패턴,
MVT,
Model, Views, Templates

검색창을 화면에서 간단히 구성후,
화면에서 -> 검색어 -> 장고 -> URL -> Views
-> DB 검색어 이용해서 검색한 결과 -> 화면 반환

1.
Views 작성,
프로젝트명/views.py

def burger_search(request):
	return render(request, "burger_search.html")

2
html 화면 구성.
templates  폴더
burger_search.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>burger_search 검색</title>
</head>
<body>
<h1>burger_search 검색 화면</h1>
</body>
</html>

3
라우팅 연결,
프로젝트명/urls.py

from helloworld.views import burger_search

urlpatterns = [
    ...
    path("search/",burger_search),

4
확인.
장고 서버 켜고, url,
http://localhost:8000/search/


5
화면 -> 서버 , get으로 검색어 받아보기.
예시)
http://localhost:8000/search?keyword=더블

프로젝트명/views.py

def burger_search(request):
    print(request.GET)
    return render(request, "burger_search.html")

6
서버에서, 검색어로 디비에서 조회 해보기.
def burger_search(request):
    # print(request.GET)
    keyword = request.GET.get("keyword")
    print(keyword)

    # 검색어 이용해서, DB에서 데이터 검색하기.
    burgers = Burger.objects.filter(name__contains=keyword)
    print("조회된 내용 : ",burgers)
    return render(request, "burger_search.html")

7
확인.
http://127.0.0.1:8000/search/?keyword=와퍼

서버 콘솔에서,
와퍼
조회된 내용 :  <QuerySet [<Burger: 더블와퍼>, <Burger: 새우와퍼>]>

8
서버 -> 화면으로 , 조회된 결과 데이터 전달.

def burger_search(request):
    # print(request.GET)
    keyword = request.GET.get("keyword")
    print(keyword)

    # 검색어 이용해서, DB에서 데이터 검색하기.
    burgers = Burger.objects.filter(name__contains=keyword)

    # 서버 -> 화면으로 전달
    context = {
        "burgers": burgers
    }
    print("조회된 내용 : ",burgers)
    return render(request, "burger_search.html",context)


9
단순 화면에서 확인.
burger_search.html

<h1>burger_search 검색 화면</h1>
<h2>검색 결과</h2>
<div>{{ burgers }}</div>


10
반복문으로 처리 해주기.
<h2>검색 결과</h2>
{#<div>{{ burgers }}</div>#}
{% for burger in burgers %}
    <div>
        {{ burger.name }} (가격: {{ burger.price }}원,
    칼로리: {{ burger.calories }} kcal)
    </div>
{% endfor %}
</body>

11
검색어가 없는 경우는, 디비에서 none 처리하기.
기본 유효성 체크.
프로젝트명/views.py

def burger_search(request):
    # print(request.GET)
    keyword = request.GET.get("keyword")
    print(keyword)

    # 유효성 체크, keyword 값이 주어진 경우에만 조회하기.
    if keyword is not None:
        # 검색어 이용해서, DB에서 데이터 검색하기.
        burgers = Burger.objects.filter(name__contains=keyword)
    else:
        # 검색어가 없는 경우.
        burgers = Burger.objects.none()
    # 서버 -> 화면으로 전달
    context = {
        "burgers": burgers
    }
    print("조회된 내용 : ",burgers)
    return render(request, "burger_search.html",context)

12
화면, 검색창 추가.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>burger_search 검색</title>
</head>
<body>
<h1>burger_search 검색 화면</h1>
<h2>검색 결과</h2>
{#<div>{{ burgers }}</div>#}
<form method="get">
    <input type="text" name="keyword">
    <button type="submit">검색</button>
</form>
{% for burger in burgers %}
    <div>
        {{ burger.name }} (가격: {{ burger.price }}원,
    칼로리: {{ burger.calories }} kcal)
    </div>
{% endfor %}
</body>
</html>